{"name":"Feedparser","tagline":"Library for parsing RSS/Atom feeds","body":"FeedParser\r\n==========\r\n\r\nFeedParser is a PHP library that handles all types of XML feeds. \r\n\r\nExample\r\n-------\r\n\r\n(Also, in feed.php)\r\n\r\n```php\r\n<?php\r\n\r\n// The only thing we need is include base class file\r\nrequire_once('FeedParser.php');\r\n\r\n// Get XML serialization of feed\r\n$xml = file_get_contents($_POST['filename']);\r\n\r\n// This is great. To work with feed we invoke only base class. All other work is \r\n// transparent.\r\n$feed = new FeedParser($xml);\r\n\r\n//Because we have interface for feeds, we invoke interface methods\r\necho '<b>Type:</b>'.$feed->getFeedType().\"<br/>\";\r\necho '<b>Title:</b>'.$feed->getTitle().\"<br/>\";\r\necho '<b>Description:</b>'.$feed->getDescription().\"<br/>\";\r\necho '<b>Feed link:</b>'.$feed->getFeedLink().\"<br/>\";\r\necho '<b>Link:</b>'.$feed->getLink().\"<br/>\";\r\n\r\n$items = $feed->getItems();\r\n\r\n// Stuff in your items can be empty, so you should somehow handle it.\r\n// I've prepared is_empty function for you - enjoy.\r\n$i=1;\r\nforeach($items as $item)\r\n{\r\n\t//Because we have interface for items, we invoke interface methods\r\n\techo \"<h1>\";\r\n\tif(is_empty($item->getLink()))\r\n\t\techo '<a href=\"#\">';\r\n\telse\r\n\t\techo '<a href=\"'.$item->getLink().'\">';\r\n\r\n\tif(is_empty($item->getTitle()))\r\n\t\techo \"No title\";\r\n\telse\r\n\t\techo \"$i. \".$item->getTitle();\r\n\techo \"</a>\";\r\n\r\n\techo \"</h1>\";\r\n\r\n\tif(is_empty($item->getPubDate()))\r\n\t\techo \"<i>\".\"No date\".\"</i><br/>\";\r\n\telse\r\n\t\techo \"<i>\".$item->getPubDate().\"</i><br/>\";\r\n\r\n\tif(is_empty($item->getContent()))\r\n\t\techo \"<i>\".\"No content\".\"</i><br/>\";\r\n\telse\r\n\t\techo $item->getContent().\"<hr/>\";\r\n\r\n\t$i++;\r\n}\r\n\r\n?>\r\n```\r\n\r\nFeatures and API\r\n----------------\r\n\r\nIt supports:\r\n\r\n * RSS 0.90\r\n * RSS 1.0\r\n * RSS 1.1\r\n * RSS 0.91\r\n * RSS 0.92\r\n * RSS 2\r\n * Atom 1\r\n * Atom 0.3 (treated as Atom 1)\r\n\r\nIt has 2 interfaces - one for work with feeds, and the other one is to work with\r\nfeed's items.\r\n\r\nMethods:\r\n\r\n* Feeds\r\n\t- `getTitle()` - retrieve feed title\r\n\t- `getDescription()` - retrieve feed description\r\n\t- `getItems()` - retrieve feed items as array \r\n\t- `getLink()` - retrieve feed link (Link to feed website)\r\n\t- `getFeedLink()` - retrieve feed link to itself\r\n\t- `getFeedType()` - retrieve feed type as string\r\n* Items\r\n\t- `getTitle()` - retrieve item title\r\n\t- `getContent()` - retrieve item content as string\r\n\t- `getPubDate()` - retrieve item publication date as PHP date\r\n\t- `getLink()` - retrieve item link \r\n\r\n\r\nHistory\r\n-------\r\n\r\nI read a lot. I have about 100 RSS/Atom subscriptions, that i read every day.\r\nIt helps me to have actual knowledge and have fun. All feeds i read in google \r\nreader. However i didn’t like it much from the beginning because of small \r\nviewport. If you open google reader on small 1024×600 netbook screen you’ll \r\nunderstand what i’m talking about. For example, it’s really impossible to \r\nview photos.\r\n\r\nThat’s why i’ve decided to write my own reader and get practice in PHP/Yii.\r\n\r\nSo, if you want to read RSS/Atom, you have to parse it somehow. At first i \r\nwanted to use something already done and found XML_Feed_Parser library by \r\nJames Stewart at PEAR. I’ve tried to fit it under my code, but despite all \r\nbenefits, it wasn’t so “unified” as it was told in description. And \r\nthat’s why I wrote my own library, based on James's work.\r\n\r\nSource code distributed under terms of LGPLv3. \r\n\r\nIf you have any questions, suggestions or anything else – write me email to \r\nalex.dzyoba@gmail.com or ask through github.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}